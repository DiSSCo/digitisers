/*
 * The EBI Search: RESTful Web services
 * This is an API documentation for [EBI Search](https://www.ebi.ac.uk/ebisearch) RESTful Web services.
 *
 * The version of the OpenAPI document: all
 * Contact: www-prod@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.dissco.digitisers.clients.ebi.openapi.rest;

import eu.dissco.digitisers.clients.ebi.openapi.ApiCallback;
import eu.dissco.digitisers.clients.ebi.openapi.ApiClient;
import eu.dissco.digitisers.clients.ebi.openapi.ApiException;
import eu.dissco.digitisers.clients.ebi.openapi.ApiResponse;
import eu.dissco.digitisers.clients.ebi.openapi.Configuration;
import eu.dissco.digitisers.clients.ebi.openapi.Pair;
import eu.dissco.digitisers.clients.ebi.openapi.ProgressRequestBody;
import eu.dissco.digitisers.clients.ebi.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.dissco.digitisers.clients.ebi.openapi.model.WSError;
import eu.dissco.digitisers.clients.ebi.openapi.model.WSSuggestionResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutoCompleteApi {
    private ApiClient localVarApiClient;

    public AutoCompleteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutoCompleteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for autocomplete1
     * @param domain A single domain identifier (required)
     * @param term A term to get suggestions, whose length should be at least 3 characters (required)
     * @param accept Accept request HTTP header (optional)
     * @param formatted Whether to include suggestions in a highlighted form (optional, default to &quot;false&quot;)
     * @param format Response format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of suggestions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autocomplete1Call(String domain, String term, String accept, String formatted, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{domain}/autocomplete"
            .replaceAll("\\{" + "domain" + "\\}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (term != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term", term));
        }

        if (formatted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("formatted", formatted));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json", "text/csv", "text/tab-separated-values"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocomplete1ValidateBeforeCall(String domain, String term, String accept, String formatted, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling autocomplete1(Async)");
        }
        
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling autocomplete1(Async)");
        }
        

        okhttp3.Call localVarCall = autocomplete1Call(domain, term, accept, formatted, format, _callback);
        return localVarCall;

    }

    /**
     * Auto complete
     * It returns a list of suggested queries based on a given term
     * @param domain A single domain identifier (required)
     * @param term A term to get suggestions, whose length should be at least 3 characters (required)
     * @param accept Accept request HTTP header (optional)
     * @param formatted Whether to include suggestions in a highlighted form (optional, default to &quot;false&quot;)
     * @param format Response format (optional)
     * @return WSSuggestionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of suggestions </td><td>  -  </td></tr>
     </table>
     */
    public WSSuggestionResult autocomplete1(String domain, String term, String accept, String formatted, String format) throws ApiException {
        ApiResponse<WSSuggestionResult> localVarResp = autocomplete1WithHttpInfo(domain, term, accept, formatted, format);
        return localVarResp.getData();
    }

    /**
     * Auto complete
     * It returns a list of suggested queries based on a given term
     * @param domain A single domain identifier (required)
     * @param term A term to get suggestions, whose length should be at least 3 characters (required)
     * @param accept Accept request HTTP header (optional)
     * @param formatted Whether to include suggestions in a highlighted form (optional, default to &quot;false&quot;)
     * @param format Response format (optional)
     * @return ApiResponse&lt;WSSuggestionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of suggestions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WSSuggestionResult> autocomplete1WithHttpInfo(String domain, String term, String accept, String formatted, String format) throws ApiException {
        okhttp3.Call localVarCall = autocomplete1ValidateBeforeCall(domain, term, accept, formatted, format, null);
        Type localVarReturnType = new TypeToken<WSSuggestionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Auto complete (asynchronously)
     * It returns a list of suggested queries based on a given term
     * @param domain A single domain identifier (required)
     * @param term A term to get suggestions, whose length should be at least 3 characters (required)
     * @param accept Accept request HTTP header (optional)
     * @param formatted Whether to include suggestions in a highlighted form (optional, default to &quot;false&quot;)
     * @param format Response format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of suggestions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autocomplete1Async(String domain, String term, String accept, String formatted, String format, final ApiCallback<WSSuggestionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocomplete1ValidateBeforeCall(domain, term, accept, formatted, format, _callback);
        Type localVarReturnType = new TypeToken<WSSuggestionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
