/*
 * The EBI Search: RESTful Web services
 * This is an API documentation for [EBI Search](https://www.ebi.ac.uk/ebisearch) RESTful Web services.
 *
 * The version of the OpenAPI document: all
 * Contact: www-prod@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.dissco.digitisers.clients.ebi.openapi.rest;

import eu.dissco.digitisers.clients.ebi.openapi.ApiCallback;
import eu.dissco.digitisers.clients.ebi.openapi.ApiClient;
import eu.dissco.digitisers.clients.ebi.openapi.ApiException;
import eu.dissco.digitisers.clients.ebi.openapi.ApiResponse;
import eu.dissco.digitisers.clients.ebi.openapi.Configuration;
import eu.dissco.digitisers.clients.ebi.openapi.Pair;
import eu.dissco.digitisers.clients.ebi.openapi.ProgressRequestBody;
import eu.dissco.digitisers.clients.ebi.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.dissco.digitisers.clients.ebi.openapi.model.WSDomainMetadataResult;
import eu.dissco.digitisers.clients.ebi.openapi.model.WSError;
import eu.dissco.digitisers.clients.ebi.openapi.model.WSSearchResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CrossReferenceSearchApi {
    private ApiClient localVarApiClient;

    public CrossReferenceSearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CrossReferenceSearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for crossreference1
     * @param domain A single domain identifier (required)
     * @param entryids Comma separated values of entry identifiers (required)
     * @param targetdomainid A single domain identifier to search on (required)
     * @param accept Accept request HTTP header (optional)
     * @param size The number of entries to retrieve. limit 100 (optional, default to &quot;15&quot;)
     * @param start The index of the first entry in the results. limit 1,000,000 (optional, default to &quot;0&quot;)
     * @param fields Comma separated values of field identifiers to retrieve (optional)
     * @param fieldurl Whether field links are included. The returned links mean direct URLs to the data entries in the original portals. Valid with XML/JSON only (optional, default to &quot;false&quot;)
     * @param viewurl Whether other view links on an entry are included. Valid with XML/JSON only (optional, default to &quot;false&quot;)
     * @param facetfields Comma separated values of field identifiers associated with facets to retrieve. In case of hierarchical facet, the value for the field can be a path where the nodes are separated by a &#39;/&#39;. i.e.: taxonomy_lineage/1/10239/35268 (taxonomy_lineage is the name of the hierarchical facet and nodes are possible values of the facet). Valid with XML/JSON only (optional)
     * @param facetcount The number of facet values to retrieve. In case of hierarchical facet, the facet count limit the number of children retrieved in a single level. Valid with XML/JSON only. (optional, default to &quot;0&quot;)
     * @param facets A comma separated list of selected facet values (optional)
     * @param format Response format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of entries and facets if requried </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crossreference1Call(String domain, String entryids, String targetdomainid, String accept, String size, String start, String fields, String fieldurl, String viewurl, String facetfields, String facetcount, String facets, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{domain}/entry/{entryids}/xref/{targetdomainid}"
            .replaceAll("\\{" + "domain" + "\\}", localVarApiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "entryids" + "\\}", localVarApiClient.escapeString(entryids.toString()))
            .replaceAll("\\{" + "targetdomainid" + "\\}", localVarApiClient.escapeString(targetdomainid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (fieldurl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldurl", fieldurl));
        }

        if (viewurl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("viewurl", viewurl));
        }

        if (facetfields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetfields", facetfields));
        }

        if (facetcount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetcount", facetcount));
        }

        if (facets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facets", facets));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json", "text/csv", "text/tab-separated-values"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crossreference1ValidateBeforeCall(String domain, String entryids, String targetdomainid, String accept, String size, String start, String fields, String fieldurl, String viewurl, String facetfields, String facetcount, String facets, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling crossreference1(Async)");
        }
        
        // verify the required parameter 'entryids' is set
        if (entryids == null) {
            throw new ApiException("Missing the required parameter 'entryids' when calling crossreference1(Async)");
        }
        
        // verify the required parameter 'targetdomainid' is set
        if (targetdomainid == null) {
            throw new ApiException("Missing the required parameter 'targetdomainid' when calling crossreference1(Async)");
        }
        

        okhttp3.Call localVarCall = crossreference1Call(domain, entryids, targetdomainid, accept, size, start, fields, fieldurl, viewurl, facetfields, facetcount, facets, format, _callback);
        return localVarCall;

    }

    /**
     * Cross-reference search
     * It returns a list of cross references in a target domain associated with an entry
     * @param domain A single domain identifier (required)
     * @param entryids Comma separated values of entry identifiers (required)
     * @param targetdomainid A single domain identifier to search on (required)
     * @param accept Accept request HTTP header (optional)
     * @param size The number of entries to retrieve. limit 100 (optional, default to &quot;15&quot;)
     * @param start The index of the first entry in the results. limit 1,000,000 (optional, default to &quot;0&quot;)
     * @param fields Comma separated values of field identifiers to retrieve (optional)
     * @param fieldurl Whether field links are included. The returned links mean direct URLs to the data entries in the original portals. Valid with XML/JSON only (optional, default to &quot;false&quot;)
     * @param viewurl Whether other view links on an entry are included. Valid with XML/JSON only (optional, default to &quot;false&quot;)
     * @param facetfields Comma separated values of field identifiers associated with facets to retrieve. In case of hierarchical facet, the value for the field can be a path where the nodes are separated by a &#39;/&#39;. i.e.: taxonomy_lineage/1/10239/35268 (taxonomy_lineage is the name of the hierarchical facet and nodes are possible values of the facet). Valid with XML/JSON only (optional)
     * @param facetcount The number of facet values to retrieve. In case of hierarchical facet, the facet count limit the number of children retrieved in a single level. Valid with XML/JSON only. (optional, default to &quot;0&quot;)
     * @param facets A comma separated list of selected facet values (optional)
     * @param format Response format (optional)
     * @return WSSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of entries and facets if requried </td><td>  -  </td></tr>
     </table>
     */
    public WSSearchResult crossreference1(String domain, String entryids, String targetdomainid, String accept, String size, String start, String fields, String fieldurl, String viewurl, String facetfields, String facetcount, String facets, String format) throws ApiException {
        ApiResponse<WSSearchResult> localVarResp = crossreference1WithHttpInfo(domain, entryids, targetdomainid, accept, size, start, fields, fieldurl, viewurl, facetfields, facetcount, facets, format);
        return localVarResp.getData();
    }

    /**
     * Cross-reference search
     * It returns a list of cross references in a target domain associated with an entry
     * @param domain A single domain identifier (required)
     * @param entryids Comma separated values of entry identifiers (required)
     * @param targetdomainid A single domain identifier to search on (required)
     * @param accept Accept request HTTP header (optional)
     * @param size The number of entries to retrieve. limit 100 (optional, default to &quot;15&quot;)
     * @param start The index of the first entry in the results. limit 1,000,000 (optional, default to &quot;0&quot;)
     * @param fields Comma separated values of field identifiers to retrieve (optional)
     * @param fieldurl Whether field links are included. The returned links mean direct URLs to the data entries in the original portals. Valid with XML/JSON only (optional, default to &quot;false&quot;)
     * @param viewurl Whether other view links on an entry are included. Valid with XML/JSON only (optional, default to &quot;false&quot;)
     * @param facetfields Comma separated values of field identifiers associated with facets to retrieve. In case of hierarchical facet, the value for the field can be a path where the nodes are separated by a &#39;/&#39;. i.e.: taxonomy_lineage/1/10239/35268 (taxonomy_lineage is the name of the hierarchical facet and nodes are possible values of the facet). Valid with XML/JSON only (optional)
     * @param facetcount The number of facet values to retrieve. In case of hierarchical facet, the facet count limit the number of children retrieved in a single level. Valid with XML/JSON only. (optional, default to &quot;0&quot;)
     * @param facets A comma separated list of selected facet values (optional)
     * @param format Response format (optional)
     * @return ApiResponse&lt;WSSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of entries and facets if requried </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WSSearchResult> crossreference1WithHttpInfo(String domain, String entryids, String targetdomainid, String accept, String size, String start, String fields, String fieldurl, String viewurl, String facetfields, String facetcount, String facets, String format) throws ApiException {
        okhttp3.Call localVarCall = crossreference1ValidateBeforeCall(domain, entryids, targetdomainid, accept, size, start, fields, fieldurl, viewurl, facetfields, facetcount, facets, format, null);
        Type localVarReturnType = new TypeToken<WSSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cross-reference search (asynchronously)
     * It returns a list of cross references in a target domain associated with an entry
     * @param domain A single domain identifier (required)
     * @param entryids Comma separated values of entry identifiers (required)
     * @param targetdomainid A single domain identifier to search on (required)
     * @param accept Accept request HTTP header (optional)
     * @param size The number of entries to retrieve. limit 100 (optional, default to &quot;15&quot;)
     * @param start The index of the first entry in the results. limit 1,000,000 (optional, default to &quot;0&quot;)
     * @param fields Comma separated values of field identifiers to retrieve (optional)
     * @param fieldurl Whether field links are included. The returned links mean direct URLs to the data entries in the original portals. Valid with XML/JSON only (optional, default to &quot;false&quot;)
     * @param viewurl Whether other view links on an entry are included. Valid with XML/JSON only (optional, default to &quot;false&quot;)
     * @param facetfields Comma separated values of field identifiers associated with facets to retrieve. In case of hierarchical facet, the value for the field can be a path where the nodes are separated by a &#39;/&#39;. i.e.: taxonomy_lineage/1/10239/35268 (taxonomy_lineage is the name of the hierarchical facet and nodes are possible values of the facet). Valid with XML/JSON only (optional)
     * @param facetcount The number of facet values to retrieve. In case of hierarchical facet, the facet count limit the number of children retrieved in a single level. Valid with XML/JSON only. (optional, default to &quot;0&quot;)
     * @param facets A comma separated list of selected facet values (optional)
     * @param format Response format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of entries and facets if requried </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crossreference1Async(String domain, String entryids, String targetdomainid, String accept, String size, String start, String fields, String fieldurl, String viewurl, String facetfields, String facetcount, String facets, String format, final ApiCallback<WSSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = crossreference1ValidateBeforeCall(domain, entryids, targetdomainid, accept, size, start, fields, fieldurl, viewurl, facetfields, facetcount, facets, format, _callback);
        Type localVarReturnType = new TypeToken<WSSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainsReferencedInDomain1
     * @param domain A single domain identifier (required)
     * @param accept Accept request HTTP header (optional)
     * @param format Response format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of domains </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainsReferencedInDomain1Call(String domain, String accept, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{domain}/xref"
            .replaceAll("\\{" + "domain" + "\\}", localVarApiClient.escapeString(domain.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json", "text/csv", "text/tab-separated-values"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainsReferencedInDomain1ValidateBeforeCall(String domain, String accept, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainsReferencedInDomain1(Async)");
        }
        

        okhttp3.Call localVarCall = getDomainsReferencedInDomain1Call(domain, accept, format, _callback);
        return localVarCall;

    }

    /**
     * Finding domains referred by a domain
     * It returns a list of domains referred by a domain
     * @param domain A single domain identifier (required)
     * @param accept Accept request HTTP header (optional)
     * @param format Response format (optional)
     * @return WSDomainMetadataResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of domains </td><td>  -  </td></tr>
     </table>
     */
    public WSDomainMetadataResult getDomainsReferencedInDomain1(String domain, String accept, String format) throws ApiException {
        ApiResponse<WSDomainMetadataResult> localVarResp = getDomainsReferencedInDomain1WithHttpInfo(domain, accept, format);
        return localVarResp.getData();
    }

    /**
     * Finding domains referred by a domain
     * It returns a list of domains referred by a domain
     * @param domain A single domain identifier (required)
     * @param accept Accept request HTTP header (optional)
     * @param format Response format (optional)
     * @return ApiResponse&lt;WSDomainMetadataResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of domains </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WSDomainMetadataResult> getDomainsReferencedInDomain1WithHttpInfo(String domain, String accept, String format) throws ApiException {
        okhttp3.Call localVarCall = getDomainsReferencedInDomain1ValidateBeforeCall(domain, accept, format, null);
        Type localVarReturnType = new TypeToken<WSDomainMetadataResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finding domains referred by a domain (asynchronously)
     * It returns a list of domains referred by a domain
     * @param domain A single domain identifier (required)
     * @param accept Accept request HTTP header (optional)
     * @param format Response format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of domains </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainsReferencedInDomain1Async(String domain, String accept, String format, final ApiCallback<WSDomainMetadataResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainsReferencedInDomain1ValidateBeforeCall(domain, accept, format, _callback);
        Type localVarReturnType = new TypeToken<WSDomainMetadataResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainsReferencedInEntry1
     * @param domain A single domain identifier (required)
     * @param entryid A single entry identifier (required)
     * @param accept Accept request HTTP header (optional)
     * @param format Response format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of domains </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainsReferencedInEntry1Call(String domain, String entryid, String accept, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{domain}/entry/{entryid}/xref"
            .replaceAll("\\{" + "domain" + "\\}", localVarApiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "entryid" + "\\}", localVarApiClient.escapeString(entryid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/xml", "application/json", "text/csv", "text/tab-separated-values"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainsReferencedInEntry1ValidateBeforeCall(String domain, String entryid, String accept, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getDomainsReferencedInEntry1(Async)");
        }
        
        // verify the required parameter 'entryid' is set
        if (entryid == null) {
            throw new ApiException("Missing the required parameter 'entryid' when calling getDomainsReferencedInEntry1(Async)");
        }
        

        okhttp3.Call localVarCall = getDomainsReferencedInEntry1Call(domain, entryid, accept, format, _callback);
        return localVarCall;

    }

    /**
     * Finding domains referred by an entry
     * It returns a list of domains referred by an entry
     * @param domain A single domain identifier (required)
     * @param entryid A single entry identifier (required)
     * @param accept Accept request HTTP header (optional)
     * @param format Response format (optional)
     * @return WSDomainMetadataResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of domains </td><td>  -  </td></tr>
     </table>
     */
    public WSDomainMetadataResult getDomainsReferencedInEntry1(String domain, String entryid, String accept, String format) throws ApiException {
        ApiResponse<WSDomainMetadataResult> localVarResp = getDomainsReferencedInEntry1WithHttpInfo(domain, entryid, accept, format);
        return localVarResp.getData();
    }

    /**
     * Finding domains referred by an entry
     * It returns a list of domains referred by an entry
     * @param domain A single domain identifier (required)
     * @param entryid A single entry identifier (required)
     * @param accept Accept request HTTP header (optional)
     * @param format Response format (optional)
     * @return ApiResponse&lt;WSDomainMetadataResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of domains </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WSDomainMetadataResult> getDomainsReferencedInEntry1WithHttpInfo(String domain, String entryid, String accept, String format) throws ApiException {
        okhttp3.Call localVarCall = getDomainsReferencedInEntry1ValidateBeforeCall(domain, entryid, accept, format, null);
        Type localVarReturnType = new TypeToken<WSDomainMetadataResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finding domains referred by an entry (asynchronously)
     * It returns a list of domains referred by an entry
     * @param domain A single domain identifier (required)
     * @param entryid A single entry identifier (required)
     * @param accept Accept request HTTP header (optional)
     * @param format Response format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A list of domains </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainsReferencedInEntry1Async(String domain, String entryid, String accept, String format, final ApiCallback<WSDomainMetadataResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainsReferencedInEntry1ValidateBeforeCall(domain, entryid, accept, format, _callback);
        Type localVarReturnType = new TypeToken<WSDomainMetadataResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
