/*
 * The EBI Search: RESTful Web services
 * This is an API documentation for [EBI Search](https://www.ebi.ac.uk/ebisearch) RESTful Web services.
 *
 * The version of the OpenAPI document: all
 * Contact: www-prod@ebi.ac.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.dissco.digitisers.clients.ebi.openapi.rest;

import eu.dissco.digitisers.clients.ebi.openapi.ApiCallback;
import eu.dissco.digitisers.clients.ebi.openapi.ApiClient;
import eu.dissco.digitisers.clients.ebi.openapi.ApiException;
import eu.dissco.digitisers.clients.ebi.openapi.ApiResponse;
import eu.dissco.digitisers.clients.ebi.openapi.Configuration;
import eu.dissco.digitisers.clients.ebi.openapi.Pair;
import eu.dissco.digitisers.clients.ebi.openapi.ProgressRequestBody;
import eu.dissco.digitisers.clients.ebi.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import eu.dissco.digitisers.clients.ebi.openapi.model.WSError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RawDataRetrievalApi {
    private ApiClient localVarApiClient;

    public RawDataRetrievalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RawDataRetrievalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getRawData1
     * @param domain A single domain identifier (required)
     * @param entryid A single entry identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Raw data of requested entry </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawData1Call(String domain, String entryid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{domain}/rawdata/{entryid}"
            .replaceAll("\\{" + "domain" + "\\}", localVarApiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "entryid" + "\\}", localVarApiClient.escapeString(entryid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawData1ValidateBeforeCall(String domain, String entryid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getRawData1(Async)");
        }
        
        // verify the required parameter 'entryid' is set
        if (entryid == null) {
            throw new ApiException("Missing the required parameter 'entryid' when calling getRawData1(Async)");
        }
        

        okhttp3.Call localVarCall = getRawData1Call(domain, entryid, _callback);
        return localVarCall;

    }

    /**
     * Retrieving raw data for supported domains
     * It returns a raw data content for given domain and identifier
     * @param domain A single domain identifier (required)
     * @param entryid A single entry identifier (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Raw data of requested entry </td><td>  -  </td></tr>
     </table>
     */
    public String getRawData1(String domain, String entryid) throws ApiException {
        ApiResponse<String> localVarResp = getRawData1WithHttpInfo(domain, entryid);
        return localVarResp.getData();
    }

    /**
     * Retrieving raw data for supported domains
     * It returns a raw data content for given domain and identifier
     * @param domain A single domain identifier (required)
     * @param entryid A single entry identifier (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Raw data of requested entry </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getRawData1WithHttpInfo(String domain, String entryid) throws ApiException {
        okhttp3.Call localVarCall = getRawData1ValidateBeforeCall(domain, entryid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieving raw data for supported domains (asynchronously)
     * It returns a raw data content for given domain and identifier
     * @param domain A single domain identifier (required)
     * @param entryid A single entry identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid parameters </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Raw data of requested entry </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRawData1Async(String domain, String entryid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawData1ValidateBeforeCall(domain, entryid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
